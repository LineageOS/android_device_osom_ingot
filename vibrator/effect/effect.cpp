/*
 * Copyright (c) 2020, The Linux Foundation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials provided
 *       with the distribution.
 *     * Neither the name of The Linux Foundation nor the names of its
 *       contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Changes from Qualcomm Innovation Center are provided under the following license:
 * Copyright (c) 2022-2023 Qualcomm Innovation Center, Inc. All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause-Clear
 */

#include "effect.h"

#define ARRAY_SIZE(a) (sizeof(a) / sizeof(*(a)))

/* THUD, HEAVY_CLICK from wly DOUBLE_CLICK */
static const int8_t effect_1[] = {
    1,    1,    1,    1,    1,    1,    2,    2,    2,    3,    3,    4,
    4,    5,    6,    7,    8,    9,    10,   11,   13,   15,   17,   20,
    22,   26,   29,   33,   38,   43,   49,   56,   64,   71,   76,   81,
    85,   88,   90,   92,   93,   93,   93,   92,   91,   90,   88,   86,
    84,   81,   78,   75,   72,   68,   65,   61,   57,   53,   49,   44,
    40,   36,   31,   27,   22,   17,   12,   7,    2,    -3,   -9,   -15,
    -21,  -28,  -35,  -43,  -51,  -60,  -71,  -82,  -94,  -103, -112, -118,
    -123, -126, -127, -127, -127, -127, -124, -121, -117, -112, -107, -101,
    -94,  -87,  -80,  -72,  -64,  -55,  -47,  -38,  -30,  -21,  -12,  -4,
    5,    13,   21,   29,   37,   44,   51,   57,   63,   68,   73,   77,
    81,   84,   86,   88,   89,   89,   88,   86,   84,   81,   78,   75,
    72,   68,   64,   59,   54,   49,   44,   38,   32,   25,   19,   12,
    5,    -2,   -9,   -17,  -24,  -32,  -40,  -47,  -55,  -62,  -69,  -76,
    -83,  -89,  -95,  -101, -106, -111, -115, -119, -122, -124, -125, -125,
    -125, -123, -120, -116, -111, -104, -95,  -85,  -74,  -65,  -56,  -49,
    -42,  -35,  -30,  -24,  -19,  -15,  -10,  -6,   -3,   1,    5,    8,
    11,   15,   18,   21,   24,   26,   29,   32,   34,   37,   39,   41,
    43,   45,   47,   49,   50,   51,   52,   53,   54,   54,   54,   54,
    53,   52,   50,   48,   45,   42,   38,   33,   29,   25,   22,   19,
    17,   14,   12,   11,   9,    8,    7,    6,    5,    4,    4,    3,
    3,    2,    2,    2,    1,    1,    1,    1,    1,    0
};

/* CLICK, TICK, from porsche TICK */
static const int8_t effect_2[] = {
    1,    1,    1,    1,    1,    1,    2,    2,    2,    3,    3,    4,
    4,    5,    6,    7,    8,    9,    10,   12,   13,   14,   16,   19,
    22,   25,   28,   32,   36,   42,   48,   54,   61,   69,   78,   85,
    92,   97,   102,  106,  110,  113,  115,  117,  119,  121,  121,  123,
    123,  123,  124,  124,  124,  123,  123,  123,  122,  121,  121,  120,
    119,  118,  117,  115,  114,  113,  112,  111,  109,  108,  106,  105,
    103,  101,  99,   97,   95,   93,   91,   89,   86,   83,   80,   77,
    73,   69,   64,   60,   54,   48,   41,   34,   25,   15,   4,    -7,
    -22,  -37,  -51,  -64,  -74,  -83,  -91,  -99,  -104, -109, -112, -115,
    -119, -120, -122, -122, -123, -122, -122, -122, -120, -120, -118, -116,
    -114, -112, -110, -107, -105, -103, -99,  -97,  -95,  -91,  -89,  -86,
    -83,  -80,  -77,  -74,  -71,  -68,  -64,  -61,  -58,  -55,  -52,  -49,
    -46,  -43,  -40,  -36,  -33,  -29,  -26,  -22,  -18,  -14,  -10,  -5,
    0,    6,    12,   19,   27,   35,   42,   47,   52,   57,   60,   63,
    65,   66,   67,   68,   68,   67,   67,   66,   64,   62,   61,   58,
    56,   53,   51,   49,   45,   43,   39,   35,   33,   29,   26,   22,
    19,   15,   12,   8,    5,    1,    -2,   -5,   -9,   -12,  -14,  -17,
    -20,  -22,  -25,  -27,  -28,  -30,  -32,  -32,  -34,  -34,  -34,  -34,
    -33,  -31,  -29,  -27,  -24,  -21,  -16,  -11,  -4,   2,    8,    14,
    19,   23,   27,   31,   35,   38,   42,   45,   48,   51,   54,   56,
    58,   62,   65,   67,   69,   72,   75,   78,   80,   83,   86,   88,
    91,   94,   97,   99,   102,  104,  107,  109,  111,  114,  116,  118,
    120,  121,  123,  124,  125,  126,  127,  127,  127,  127,  127,  126,
    124,  123,  120,  117,  113,  109,  103,  96,   89,   80,   70,   58,
    45,   32,   21,   11,   2,    -6,   -12,  -18,  -24,  -29,  -33,  -37,
    -41,  -43,  -47,  -49,  -51,  -54,  -56,  -58,  -59,  -61,  -62,  -64,
    -65,  -66,  -67,  -68,  -69,  -70,  -71,  -72,  -73,  -74,  -75,  -76,
    -77,  -77,  -78,  -78,  -79,  -79,  -80,  -80,  -80,  -80,  -80,  -80,
    -80,  -80,  -79,  -79,  -78,  -77,  -75,  -74,  -72,  -70,  -67,  -64,
    -61,  -57,  -53,  -47,  -42,  -37,  -32,  -28,  -25,  -22,  -19,  -16,
    -15,  -12,  -11,  -10,  -8,   -7,   -6,   -6,   -5,   -4,   -4,   -3,
    -3,   -3,   -3,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -1,   0
};

/* DOUBLE_CLICK, from wly THUD */
static const int8_t effect_3[] = {
    0,   5,   10,  15,  20,  25,  29,  34,  38,  43,  47,  51,  55,  58,  62,
    65,  68,  70,  73,  75,  77,  78,  79,  80,  81,  81,  81,  81,  80,  79,
    78,  77,  75,  73,  70,  68,  65,  62,  59,  55,  51,  47,  43,  39,  34,
    30,  25,  20,  15,  10,  5,   0,   -5,  -10, -15, -19, -24, -29, -34, -38,
    -42, -47, -51, -54, -58, -61, -65, -68, -70, -73, -75, -77, -78, -79, -80,
    -81, -81, -81, -81, -80, -79, -78, -77, -75, -73, -71, -68, -65, -62, -59,
    -55, -51, -47, -43, -39, -35, -30, -25, -20, -16, -11, -6,  -1,  4,   9,
    14,  19,  24,  29,  33,  38,  42,  46,  50,  54,  58,  61,  64,  67,  70,
    72,  75,  76,  78,  79,  80,  81,  81,  81,  81,  80,  80,  78,  77,  75,
    73,  71,  68,  65,  62,  59,  55,  52,  48,  44,  39,  35,  30,  26,  21,
    16,  11,  6,   1,   -4,  -9,  -14, -19, -24, -28, -33, -38, -42, -46, -50,
    -54, -58, -61, -64, -67, -70, -72, -74, -76, -78, -79, -80, -81, -81, -81,
    -81, -80, -80, -78, -77, -75, -73, -71, -68, -66, -62, -59, -56, -52, -48,
    -44, -40, -35, -31, -26, -21, -16, -11, -6,  -1,  4,   9,   14,  19,  23,
    28,  33,  37,  42,  46,  50,  54,  57,  61,  64,  67,  70,  72,  74,  76,
    78,  79,  80,  81,  81,  81,  81,  81,  80,  79,  77,  75,  73,  71,  69,
    66,  63,  59,  56,  52,  48,  44,  40,  35,  31,  26,  21,  16,  12,  7,
    2,   -3,  -8,  -13, -18, -23, -28, -32, -37, -41, -46, -50, -54, -57, -61,
    -64, -67, -70, -72, -74, -76, -78, -79, -80, -81, -81, -81, -81, -81, -80,
    -79, -77, -76, -74, -71, -69, -66, -63, -60, -56, -52, -48, -44, -40, -36,
    -31, -26, -22, -17, -12, -7,  0,   2,   3,   5,   7,   8,   10,  12,  13,
    15,  16,  17,  19,  20,  21,  22,  23,  24,  25,  26,  26,  27,  27,  28,
    28,  28,  28,  28,  28,  27,  27,  26,  26,  25,  24,  23,  22,  21,  20,
    19,  18,  16,  15,  13,  12,  10,  9,   7,   5,   4,   2,   0,   -2,  -3,
    -5,  -7,  -8,  -10, -12, -13, -15, -16, -17, -19, -20, -21, -22, -23, -24,
    -25, -26, -26, -27, -27, -28, -28, -28, -28, -28, -28, -27, -27, -26, -26,
    -25, -24, -23, -22, -21, -20, -19, -18, -16, -15, -13, -12, -10, -9,  -7,
    -5,  -4,  -2,  0,   1,   3,   5,   7,   8,   10,  11,  13,  15,  16,  17,
    19,  20,  21,  22,  23,  24,  25,  26,  26,  27,  27,  28,  28,  28,  28,
    28,  28,  27,  27,  26,  26,  25,  24,  23,  22,  21,  20,  19,  18,  16,
    15,  13,  12,  10,  9,   7,   5,   4,   2,   0,   -1,  -3,  -5,  -6,  -8,
    -10, -11, -13, -14, -16, -17, -19, -20, -21, -22, -23, -24, -25, -26, -26,
    -27, -27, -28, -28, -28, -28, -28, -28, -27, -27, -26, -26, -25, -24, -24,
    -23, -21, -20, -19, -18, -16, -15, -14, -12, -10, -9,  -7,  -6,  -4,  -2,
    0,   1,   3,   5,   6,   8,   10,  11,  13,  14,  16,  17,  18,  20,  21,
    22,  23,  24,  25,  26,  26,  27,  27,  28,  28,  28,  28,  28,  28,  27,
    27,  27,  26,  25,  24,  24,  23,  22,  20,  19,  18,  17,  15,  14,  12,
    11,  9,   7,   6,   4,   2,   1,   -1,  -3,  -5,  -6,  -8,  -10, -11, -13,
    -14, -16, -17, -18, -20, -21, -22, -23, -24, -25, -25, -26, -27, -27, -28,
    -28, -28, -28, -28, -28, -27, -27, -27, -26, -25, -24, -24, -23, -22, -20,
    -19, -18, -17, -15, -14, -12, -11, -9,  -7,  -6,  -4,  -2,  -1,  1,   3,
    4,   6,   8,   9,   11,  13,  14,  16,  17,  18,  20,  21,  22,  23,  24,
    25,  25,  26,  27,  27,  27,  28,  28,  28,  28,  28,  27,  27,  27,  26,
    25,  25,  24,  23,  22,  21,  19,  18,  17,  15,  14,  12,  11,  9,   8,
    6,   4,   2,   1,   -1,  -3,  -4,  -6,  -8,  -9,  -11, -13, -14, -15, -17,
    -18, -19, -21, -22, -23, -24, -25, -25, -26, -27, -27, -27, -28, -28, -28,
    -28, -28, -27, -27, -27, -26, -25, -25, -24, -23, -22, -21, -19, -18, -17,
    -15, -14, -12, -11, -9,  -8,  -6,  -4,  -3,  -1,  1,   3,   4,   6,   8,
    9,   11,  12,  14,  15,  17,  18,  19,  21,  22,  23,  24,  25,  25,  26,
    27,  27,  27,  28,  28,  28,  28,  28,  27,  27,  27,  26,  25,  25,  24,
    23,  22,  21,  20,  18,  17,  16,  14,  13,  11,  9,   8,   6,   4,   3,
    1,   -1,  -2,  -4,  -6,  -8,  -9,  -11, -12, -14, -15, -17, -18, -19, -21,
    -22, -23, -24, -25, -25, -26, -27, -27, -27, -28, -28, -28, -28, -28, -27,
    -27, -27, -26, -25, -25, -24, -23, -22, -21, -20, -18, -17, -16, -14, -13,
    -11, -9,  -8,  -6,  -5,  -3,  -1,  1,   2,   4,   6,   7,   9,   11,  12,
    14,  15,  17,  18,  19,  20,  22,  23,  24,  24,  25,  26,  27,  27,  27,
    28,  28,  28,  28,  28,  28,  27,  27,  26,  26,  25,  24,  23,  22,  21,
    20,  18,  17,  16,  14,  13,  11,  10,  8,   6,   5,   3,   1,   -1,  -2,
    -4,  -6,  -7,  -9,  -11, -12, -14, -15, -17, -18, -19, -20, -22, -23, -24,
    -24, -25, -26, -27, -27, -27, -28, -28, -28, -28, -28, -28, -27, -27, -26,
    -26, -25, -24, -23, -22, -21, -20, -19, -17, -16, -14, -13, -11, -10, -8,
    -6,  -5,  -3,  -1,  0,   2,   4,   6,   7,   9,   10,  12,  14,  15,  16,
    18,  19,  20,  21,  23,  23,  24,  25,  26,  26,  27,  27,  28,  28,  28,
    28,  28,  28,  27,  27,  26,  26,  25,  24,  23,  22,  21,  20,  19,  17,
    16,  14,  13,  11,  10,  8,   7,   5,   3,   1,   0,   -2,  -4,  -5,  -7,
    -9,  -10, -12, -13, -15, -16, -18, -19, -20, -21, -22, -23, -24, -25, -26,
    -26, -27, -27, -28, -28, -28, -28, -28, -28, -27, -27, -26, -26, -25, -24,
    -23, -22, -21, -20, -19, -17, -16, -15, -13, -11, -10, -8,  -7,  -5,  -3,
    -2,  0,   2,   4,   5,   7,   9,   10,  12,  13,  15,  16,  18,  19,  20,
    21,  22,  23,  24,  25,  26,  26,  27,  27,  28,  28,  28,  28,  28,  28,
    27,  27,  26,  26,  25,  24,  23,  22,  21,  20,  19,  17,  16,  15,  13,
    12,  10,  8,   7,   5,   3,   2,   0,   -2,  -3,  -5,  -7,  -9,  -10, -12,
    -13, -15, -16, -18, -19, -20, -21, -22, -23, -24, -25, -26, -26, -27, -27,
    -28, -28, -28, -28, -28, -28, -27, -27, -26, -26, -25, -24, -23, -22, -21,
    -20, -19, -18, -16, -15, -13, -12, -10, -8,  -7,  -5,  -3,  -2,  0,   2,
    3,   5,   7,   8,   10,  12,  13,  15,  16,  17,  19,  20,  21,  22,  23,
    24,  25,  26,  26,  27,  27,  28,  28,  28,  28,  28,  28,  27,  27,  26,
    26,  25,  24,  23,  22,  21,  20,  19,  18,  16,  15,  13,  12,  10,  9,
    7,   5,   4,   2,   0,   -2,  -3,  -5,  -7,  -8,  -10, -12, -13, -15, -16,
    -17, -19, -20, -21, -22, -23, -24, -25, -26, -26, -27, -27, -28, -28, -28,
    -28, -28, -28, -27, -27, -26, -26, -25, -24, -23, -22, -21, -20, -19, -18,
    -16, -15, -13, -12, -10, -9,  -7,  -5,  -4,  -2,  0,   -6,  -12, -18, -24,
    -30, -35, -41, -46, -51, -56, -61, -66, -70, -74, -78, -81, -85, -87, -90,
    -92, -94, -95, -97, -97, -98, -98, -97, -97, -96, -94, -92, -90, -88, -85,
    -82, -78, -74, -70, -66, -62, -57, -52, -47, -41, -36, -30, -24, -18, -12,
    -6,  0,   6,   12,  18,  23,  29,  35,  40,  46,  51,  56,  61,  66,  70,
    74,  78,  81,  84,  87,  90,  92,  94,  95,  97,  97,  98,  98,  97,  97,
    96,  94,  92,  90,  88,  85,  82,  78,  75,  71,  66,  62,  57,  52,  47,
    42,  36,  30,  25,  19,  13,  7,   1,   -5,  -11, -17, -23, -29, -35, -40,
    -46, -51, -56, -61, -65, -70, -74, -77, -81, -84, -87, -90, -92, -94, -95,
    -96, -97, -98, -98, -97, -97, -96, -94, -93, -90, -88, -85, -82, -79, -75,
    -71, -67, -62, -57, -52, -47, -42, -36, -31, -25, -19, -13, -7,  -1,  5,
    11,  17,  23,  29,  34,  40,  45,  50,  55,  60,  65,  69,  73,  77,  81,
    84,  87,  90,  92,  94,  95,  96,  97,  98,  98,  97,  97,  96,  94,  93,
    91,  88,  85,  82,  79,  75,  71,  67,  62,  58,  53,  48,  42,  37,  31,
    25,  19,  14,  8,   2,   -4,  -10, -16, -22, -28, -34, -39, -45, -50, -55,
    -60, -65, -69, -73, -77, -81, -84, -87, -89, -92, -94, -95, -96, -97, -98,
    -98, -98, -97, -96, -95, -93, -91, -88, -86, -82, -79, -75, -71, -67, -63,
    -58, -53, -48, -43, -37, -31, -26, -20, -14, -8,  0
};

/* POP, from porsche POP */
static const int8_t effect_4[] = {
    0,    0,    0,    0,    0,    1,    1,    1,    1,    1,    1,    2,
    2,    2,    3,    3,    4,    4,    5,    6,    7,    8,    9,    10,
    12,   13,   15,   17,   19,   22,   25,   28,   32,   37,   42,   48,
    55,   62,   70,   79,   86,   92,   97,   102,  107,  110,  113,  115,
    117,  119,  121,  121,  123,  123,  123,  124,  124,  124,  123,  123,
    123,  121,  121,  121,  119,  119,  118,  117,  115,  114,  113,  112,
    110,  109,  107,  106,  105,  102,  101,  99,   97,   95,   93,   91,
    89,   86,   83,   80,   77,   73,   69,   64,   60,   54,   48,   41,
    33,   24,   14,   3,    -9,   -23,  -38,  -52,  -65,  -75,  -84,  -92,
    -99,  -104, -109, -113, -115, -119, -120, -122, -122, -123, -122, -122,
    -121, -120, -119, -118, -116, -114, -112, -110, -107, -105, -102, -99,
    -97,  -94,  -91,  -88,  -85,  -82,  -79,  -76,  -74,  -70,  -68,  -64,
    -61,  -58,  -55,  -52,  -49,  -46,  -43,  -39,  -36,  -33,  -29,  -26,
    -22,  -18,  -14,  -10,  -5,   0,    7,    13,   20,   28,   35,   42,
    48,   53,   58,   60,   63,   65,   66,   67,   68,   68,   67,   67,
    66,   64,   62,   61,   58,   56,   53,   51,   48,   45,   42,   38,
    35,   33,   28,   26,   22,   19,   15,   12,   8,    5,    1,    -2,
    -5,   -9,   -12,  -14,  -17,  -20,  -22,  -25,  -28,  -29,  -30,  -32,
    -32,  -34,  -34,  -34,  -33,  -33,  -31,  -29,  -27,  -24,  -20,  -16,
    -10,  -3,   3,    9,    14,   19,   24,   27,   32,   35,   38,   42,
    45,   48,   51,   54,   57,   59,   62,   65,   68,   70,   73,   76,
    78,   80,   84,   86,   88,   91,   94,   97,   99,   102,  104,  107,
    109,  111,  114,  116,  118,  120,  121,  123,  124,  125,  126,  127,
    127,  127,  127,  127,  125,  124,  123,  120,  117,  113,  108,  102,
    96,   88,   79,   69,   57,   44,   31,   20,   10,   2,    -6,   -13,
    -19,  -24,  -29,  -33,  -37,  -41,  -44,  -47,  -49,  -52,  -54,  -56,
    -58,  -59,  -61,  -62,  -64,  -66,  -66,  -67,  -68,  -69,  -70,  -71,
    -72,  -73,  -74,  -75,  -76,  -77,  -77,  -78,  -78,  -79,  -79,  -80,
    -80,  -80,  -80,  -80,  -80,  -80,  -80,  -79,  -79,  -78,  -77,  -75,
    -74,  -72,  -70,  -67,  -64,  -61,  -56,  -52,  -46,  -41,  -36,  -31,
    -27,  -24,  -21,  -18,  -16,  -14,  -12,  -11,  -9,   -8,   -7,   -6,
    -6,   -5,   -4,   -4,   -3,   -3,   -3,   -3,   -2,   -2,   -2,   -2,
    -2,   -2,   -2,   -1,   0,    0,    0,    0,    0,    0,    0
};

static const int8_t primitive_0[] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
};

static const int8_t primitive_1[] = {
    17,  34,  50,  65,  79,  92,  103, 112, 119, 124,
    127, 127, 126, 122, 116, 108, 98,  86,  73,  58,
    42,  26,  9,   -8,  -25, -41, -57, -72, -85, -97,
    -108, -116, -122, -126, -127, -127, -125, -120,
    -113, -104, -93,  -80, -66, -51, -35, -18, -1,
};

static const int8_t primitive_2[] = {
    17,  34,  50,  65,  79,  92,  103, 112, 119, 124,
    127, 127, 126, 122, 116, 108, 98,  86,  73,  58,
    42,  26,  9,   -8,  -25, -41, -57, -72, -85, -97,
    -108, -116, -122, -126, -127, -127, -125, -120,
    -113, -104, -93,  -80, -66, -51, -35, -18, -1,
};

static const struct effect_stream effects[] = {
    {
        /* CLICK */
        .effect_id = 0,
        .data = effect_2,
        .length = ARRAY_SIZE(effect_2),
        .play_rate_hz = 24000,
    },

    {
        /* DOUBLE_CLICK */
        .effect_id = 1,
        .data = effect_3,
        .length = ARRAY_SIZE(effect_3),
        .play_rate_hz = 24000,
    },

    {
        /* TICK */
        .effect_id = 2,
        .data = effect_2,
        .length = ARRAY_SIZE(effect_2),
        .play_rate_hz = 24000,
    },

    {
        /* THUD */
        .effect_id = 3,
        .data = effect_1,
        .length = ARRAY_SIZE(effect_1),
        .play_rate_hz = 24000,
    },

    {
        /* POP */
        .effect_id = 4,
        .data = effect_4,
        .length = ARRAY_SIZE(effect_4),
        .play_rate_hz = 24000,
    },

    {
        /* HEAVY_CLICK */
        .effect_id = 5,
        .data = effect_1,
        .length = ARRAY_SIZE(effect_1),
        .play_rate_hz = 24000,
    },
};

static const struct effect_stream primitives[] = {
    {
        .effect_id = 0,
        .data = primitive_0,
        .length = ARRAY_SIZE(primitive_0),
        .play_rate_hz = 8000,
    },

    {
        .effect_id = 1,
        .data = primitive_1,
        .length = ARRAY_SIZE(primitive_1),
        .play_rate_hz = 8000,
    },

    {
        .effect_id = 2,
        .data = primitive_2,
        .length = ARRAY_SIZE(primitive_2),
        .play_rate_hz = 8000,
    },
};

const struct effect_stream *get_effect_stream(uint32_t effect_id)
{
    int i;

    if ((effect_id & 0x8000) != 0) {
        effect_id = effect_id & 0x7fff;

        for (i = 0; i < ARRAY_SIZE(primitives); i++) {
            if (effect_id == primitives[i].effect_id)
                return &primitives[i];
        }
    } else {
        for (i = 0; i < ARRAY_SIZE(effects); i++) {
            if (effect_id == effects[i].effect_id)
                return &effects[i];
        }
    }

    return NULL;
}
